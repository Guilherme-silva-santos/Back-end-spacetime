/**
 app restfull Ã© aquela que vai fazer conexÃ£o com o front trazendo dados do back
 sempre que for criar uma api, precisamos ter um server http, que Ã© o endereÃ§o que o front vai fazer recsiÃ§Ãµes 
 http, esse server recebe as equisiÃ§Ãµes e devolve uma esposta para elas.
 o server ficara ouvindo a porta 3333.
 o then significa, quando o server estiver no ar, entÃ£o(then) executa uma funÃ§Ã£o
 Prisma fica interceptando a comunicaÃ§Ã£o do do back com o db e ele cria uma forma unificada do back 
 acessar informaÃ§Ãµes do banco com uma linguagem mais apropriada paa devs, para que nÃ£o seja necessÃ¡rio criar as querys na mÃ£o 
 nÃ£o precisando executar("select, delete e assim por diante")
 npx prisma init --datasource-provider SQLite dizendo deve ser usado um bado swlite no prisma

 Criando tabelas nobando com brisam usase o model

model User{
  id String @id @default(uuid()) @id para que ele seja a primary key 
  uuid para cada user ele ira gerar um id diferente 

  apos fazer o model executar npx priimsa migarte dev para ler o arquivo de schema 
  e detecta todas as alteraÃ§Ãµes que foram feitas

  o cors Ã© um metodo de seguranÃ§a para ver quais urls de front poderam acessar a api
}
*/
import 'dotenv/config';
import fastify from 'fastify';
import { memoriesRoutes } from './routes/memories';
import cors from '@fastify/cors';
import { authRoutes } from './routes/auth';

const app = fastify();

// registrar um arquivo de rotas separado
app.register(memoriesRoutes);
app.register(authRoutes);

app.register(cors, {
	// origin: [' http://localhost:3000']
	origin: true
});

app.listen({
	port: 3333,
}).then(() => {
	console.log('ðŸš€ HTTP server running on http://localhost:3333');
});
